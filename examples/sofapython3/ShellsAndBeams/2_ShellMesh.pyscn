import Sofa
import SofaPython
from math import sin,cos, sqrt


import os
path = os.path.dirname(os.path.abspath(__file__))+'/'

radius=1
PI= 3.14159265359
dt=0.05

class pressureControl(Sofa.PythonScriptController):
    
    def initGraph(self, node):
            self.node = node
            #self.shellNode = self.node.getParents()[0]
            
        

    def onKeyPressed(self,c):
            pressurevalue = self.node.getObject('pressureForceField').findData('pressure')

            
            
            
            forceValue1 = self.node.getObject('pressure_load1').findData('totalForce')
            forceValue2 = self.node.getObject('pressure_load2').findData('totalForce')
            
            

            if (c == "+"):
               pressure = pressurevalue.value + 50
               pressurevalue.value = str(pressure)
               Force = radius*radius*PI*pressure; 
               forceValue2.value = str(Force)+' 0 0 0 0 0'
               forceValue1.value = str(-Force)+' 0 0 0 0 0'

               
            elif (c == "-"):
               pressure = pressurevalue.value -  50
               if(pressure < 0):
                   pressure = 0
               
               pressurevalue.value = str(pressure)
               
               Force = radius*radius*PI*pressure; 
               forceValue2.value = str(Force)+' 0 0 0 0 0' 
               forceValue1.value = str(-Force)+' 0 0 0 0 0'


print "**************************** README **********************************"
print "This scene makes a shell model (with rigid dofs) "
print "It assumes that the input mesh is a cylinder alligned with the axis x"
print "the mesh is symetric and can be loaded on nodes positioned at x=0"
print "**********************************************************************"


def transformTableInString(Table):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p])+' '

	return strOut


#Takes a n dimensional vector of vector and transform it into a simple vector 
def transformDoubleTableInSimpleTable(Table):
    size0 =  len(Table);

    # count the size
    size=0;
    for i in range(size0):
        size = size+len(Table[i]);

    TableOut=[0]*size;
    s=0;
    for i in range(size0):
        for j in range(len(Table[i])):
            TableOut[s] = Table[i][j];
            s=s+1;

    return TableOut



def createScene(rootNode):
    rootNode.createObject('RequiredPlugin', name='SoftRobots')
    rootNode.createObject('RequiredPlugin', name='BeamAdapter')
    rootNode.createObject('RequiredPlugin', name='SofaPython')
    rootNode.createObject('RequiredPlugin', name='SofaShells')
    rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')
    rootNode.findData('gravity').value= '0. 0 -9.8';
    
    
    
    rootNode.findData('dt').value= dt;

    rootNode.createObject('FreeMotionAnimationLoop')
    rootNode.createObject('GenericConstraintSolver', maxIterations='1000', tolerance='1e-15')
    rootNode.createObject('CollisionPipeline', verbose='0')
    rootNode.createObject('CollisionResponse', response='FrictionContact', responseParams='mu=0.5')
    rootNode.createObject('BruteForceDetection', name='N2')
    
    alarmDistance=0.2
    rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance=alarmDistance, contactDistance="0.1", angleCone='0.1')

    rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
    rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")
    
    
    ############## JE SUIS LA !!!!

    
    #########################################
    # Mapped Pseudo Beam 
    #########################################

    length=10
    
    initPressure= 200.0;
    
    Force_end = radius*radius*PI*initPressure;
    
    epsilon='1e-6'
    

    youngModulusTri=1e3   
    
    
    cylinder = rootNode.createChild('cylinderMechanics')
    cylinder.createObject('EulerImplicitSolver', firstOrder="0", rayleighStiffness=1, rayleighMass='1e-2')
    #cylinder.createObject('CGLinearSolver' ,  iterations='1000', tolerance='1.0e-10', threshold='1e-9') 
    cylinder.createObject('PCGLinearSolver', name='linearSolver', iterations='10', tolerance='1.0e-18', preconditioners="preconditioner")
    cylinder.createObject('SparseLDLSolver', name='preconditioner', template='CompressedRowSparseMatrix3d') 
    cylinder.createObject('GenericConstraintCorrection', solverName="preconditioner")
    
    
    shellCylinder=cylinder.createChild('shellCylinder')
    loader=shellCylinder.createObject('GIDMeshLoader', name='loader', filename=path+'meshCylinderSymetric2.msh', scale='1');
    shellCylinder.createObject('Mesh', src='@loader')
    shellCylinder.createObject('Vertex2Frame', position='@loader.position', normals='@loader.normals', name='engine', invertNormals='1', template='Rigid3d') 
    shellCylinder.createObject('MechanicalObject', template='Rigid', position='@engine.frames', showObject='1')
    
    
    shellCylinder.createObject('TriangularShellForceField', measure='Von Mises Stress', thickness='0.05',  youngModulus='10e5')
    
    shellCylinder.createObject('BoxROI', name='roi1', box= '-5.1 -2 -2 -4.9 2 2  ', drawBoxes='true')
    
    shellCylinder.createObject('BoxROI', name='roi2', box= '-0.1 -2 -2 0.1 2 2  ', drawBoxes='true')
    
    shellCylinder.createObject('BoxROI', name='roi3', box= '4.9 -2 -2 5.1 2 2   ', drawBoxes='true')
    
    shellCylinder.createObject('ConstantForceField', name='middle_load', totalForce='0 0 -800 0 0 0', arrowSizeCoef='0.05', indices='@roi3.indices')
    
    
    # symetric pressure load:
    pressure_Force= [Force_end,0,0,0,0,0];
    
    shellCylinder.createObject('ConstantForceField', name='pressure_load2', totalForce=pressure_Force, arrowSizeCoef='0.02', indices='@roi3.indices')
    pressure_Force= [-Force_end,0,0,0,0,0];
    
    shellCylinder.createObject('ConstantForceField', name='pressure_load1', totalForce=pressure_Force, arrowSizeCoef='0.02', indices='@roi1.indices')
    
    
    
    # pressure FF*****************************
    shellCylinder.createObject('PythonScriptController', classname="pressureControl")    
    shellCylinder.createObject('SurfacePressureForceField', template='Rigid3d', name='pressureForceField', pressure=initPressure, useTangentStiffness='2')    
    # ****************************************
    
    shellCylinder.createObject('FixedConstraint', indices='@roi1.indices')
    #shellCylinder.createObject('PartialFixedConstraint', indices='@roi1.indices', fixedDirections='0 1 1 1 0 0')
    #shellCylinder.createObject('PartialFixedConstraint', indices='@roi3.indices', fixedDirections='0 1 1 1 0 0')
    #shellCylinder.createObject('PartialFixedConstraint', indices='@roi2.indices', fixedDirections='1 0 0 0 0 0')
    
    
    
    
    
    triSurf = shellCylinder.createChild('TriSurface')
    triSurf.createObject('MechanicalObject', name='slaveNodes', src='@../loader')

    
    triSurf.createObject('Triangle', bothSide='0', selfCollision='1')
    triSurf.createObject('Line', bothSide='0', selfCollision='1')
    triSurf.createObject('Point', bothSide='0', selfCollision='1')
    
    triSurf.createObject('IdentityMapping' )
    
    
    
    
    return rootNode     
    
   
